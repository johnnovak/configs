//FILTER CODE ADAPTED FROM JS:LOSER/3BandSplitter
//OVERSAMPLE/RESTORATION CODE FROM JS/Liteon/waveshapemulti

desc:Infernal Diseased Dire Rat
slider1:5<0,10,0.1> HP
slider2:10<0,10,0.1> AC
slider3:10<0,10,0.1> ATT
slider4:0 <0, 4, 1{S, A, L, W, O}> Special Abilities
slider5:0 <0, 1, 1{off, on}> flip bottom
slider6:0 <0, 1, 1{off, on}> R channel bias

@init
ext_nodenorm = 1.0;
cDenorm=10^-30;
x_scale = 1.39629436112;
quotient = 0.333333333333;
gainpotsize = 187639;
tonepotsize = levelpotsize = 100639;
c4 = 100.100100100 * 10^(-12);
c5 = 2.3219214576 * 10^(-6);
c6 = 4.9927321025 * 10^(-6);
c8 = 3.3489067218 * 10^(-9);
r4 = 47.474747474;
r5 = 549.54954954;
divtop = rpar = (r4 * r5) / (r4 + r5);
volt = 13.8;
bias = 0;
unitybandwidth = 3044847.56 * .1;
slew = 0.292827262524;
toprail = 3.989796959493;
bottomrail = 4.069874682101;
topdiode_init = 0.639639639639;
bottomdiode_init = 0.59562599329;
topdiode = topdiode_init;
bottomdiode = bottomdiode_init;

crossover = 0.06;
top_floor = -crossover;
bottom_floor = crossover;


freqHP1 = 1 / (2*$pi*c5*r4);
xHP1 = exp(-2.0*$pi*freqHP1/srate);
a0HP1 = 1.0-xHP1;
b1HP1 = -xHP1;
HP1_divtop = r4;


freqHP2 = 1 / (2*$pi*c6*r5);
xHP2 = exp(-2.0*$pi*freqHP2/srate);
a0HP2 = 1.0-xHP2;
b1HP2 = -xHP2;
HP2_divtop = r5;


//LP1 see @slider (gainpot dependent)
//LP2 see @slider (tonepot dependent)

freqLP3 = 129732.237921 * 0.25;
xLP3 = exp(-2.0*$pi*freqLP3/srate);
a0LP3 = 1.0-xLP3;
b1LP3 = -xLP3;

//LP4 deleted
//LP5 = LP3
//LP6 deleted
//LP7 see @slider (gainpot dependent)


//fir restoration
c1 = 1;
c2 = -0.75;
c3 = 0.17;
flosscompgain = 0.66368;

//fir bandlimit
bl_c1 = 0.52;
bl_c2 = 0.54;
bl_c3 = -0.02;
restlosscompgain = 0.365153;


s0 = 0;
s0_1 = 0;




@slider
gainpot = (slider1 / 10);
gainpot = gainpotsize * quotient * (exp(x_scale * gainpot) - 1);
gainpot += 1;
divbottom = gainpot + rpar;
divbottomdrop = divtop/divbottom;
divtopdrop = 1 - divbottomdrop;
filtermix = divtopdrop;
drymix = divbottomdrop;
totalgain = 1 + (gainpot / rpar);

tonepot = 1 - (slider2 / 10);
tonepot = tonepotsize * quotient * (exp(x_scale * tonepot) - 1);
tonepot += 1;


levelpot = (slider3 / 10);
levelpot = levelpotsize * quotient * (exp(x_scale * levelpot) - 1);
levelpot += 1;
leveltop = levelpotsize - levelpot;
levelratio = (levelpot + 3427) / (leveltop + levelpot);


freqLP1 = 1 / (2*$pi*c4*gainpot);
xLP1 = exp(-2.0*$pi*freqLP1/srate);
a0LP1 = 1.0-xLP1;
b1LP1 = -xLP1;

freqLP2 = 1 / (2*$pi*c8*(tonepot + 2515.25152515));
xLP2 = exp(-2.0*$pi*freqLP2/srate);
a0LP2 = 1.0-xLP2;
b1LP2 = -xLP2;

freqLP7 = unitybandwidth / totalgain;
xLP7 = exp(-2.0*$pi*freqLP7/srate);
a0LP7 = 1.0-xLP7;
b1LP7 = -xLP7;

HP1_divbottom = gainpot + r4;
HP1_divbottomdrop = HP1_divtop/HP1_divbottom;
HP1_divtopdrop = 1 - HP1_divbottomdrop;
HP1_filtermix = HP1_divtopdrop;
HP1_drymix = HP1_divbottomdrop;
HP1_gain = 1 / HP1_drymix;

HP2_divbottom = gainpot + r5;
HP2_divbottomdrop = HP2_divtop/HP2_divbottom;
HP2_divtopdrop = 1 - HP2_divbottomdrop;
HP2_filtermix = HP2_divtopdrop;
HP2_drymix = HP2_divbottomdrop;
HP2_gain = 1 / HP2_drymix;


slider4 == 0 ?
  (topdiode = topdiode_init; bottomdiode = bottomdiode_init;) :
  (slider4 == 1 ) ? 
  (topdiode = 2 * topdiode_init; bottomdiode = bottomdiode_init;) :
  (slider4 == 2) ?
  (topdiode = 2 * topdiode_init; bottomdiode = 2 * bottomdiode_init;) :
  (slider4 == 3) ?
  (topdiode = 70000 * topdiode_init; bottomdiode = bottomdiode_init) :
  (slider4 == 4) ?
  (topdiode = 70000 * topdiode_init; bottomdiode = 70000 * bottomdiode_init;) ;
  
flip_bottom = slider5;
R_chan_bias = slider6;  


   

@sample
 
input0 = spl0*volt;
input1 = spl1*volt;

bias = input1 * R_chan_bias;

s0 = input0;

input = s0*4350;
tophalf = max(input, top_floor);
tophalf -= top_floor;
exp_var = exp(-3.33*tophalf);
equ_top = 1 - exp_var;
equ_bot = 1 + exp_var;
equ_quo = equ_top / equ_bot;
tophalf -= (.6 * equ_quo);

bottomhalf = min(input, bottom_floor);
bottomhalf -= bottom_floor;
exp_var = exp(-3.33*bottomhalf);
equ_top = 1 - exp_var;
equ_bot = 1 + exp_var;
equ_quo = equ_top / equ_bot;
bottomhalf -= (.6 * equ_quo);
flip_bottom == 1 ?
    (bottomhalf *= -1);
output = tophalf + bottomhalf;
s0 = output/4350;

HP1 = s0 - (tmplHP1 = a0HP1*s0 - b1HP1*tmplHP1 + cDenorm);
HP1_filter = HP1 * HP1_filtermix;
HP1_dry = s0 * HP1_drymix;

HP1 = (HP1_filter + HP1_dry) / HP1_drymix;

HP2 = s0 - (tmplHP2 = a0HP2*s0 - b1HP2*tmplHP2 + cDenorm);
HP2_filter = HP2 * HP2_filtermix;
HP2_dry = s0 * HP2_drymix;

HP2 = (HP2_filter + HP2_dry) / HP2_drymix;

s0 = ((HP1 + HP2)) / 1.2;
s0 += bias;

LP1 = (tmplLP1 = a0LP1*s0 - b1LP1*tmplLP1 + cDenorm);
s0 = LP1;

LP7 = (tmplLP7 = a0LP7*s0 - b1LP7*tmplLP7 + cDenorm);
s0 = LP7;

LP3 = (tmplLP3 = a0LP3*s0 - b1LP3*tmplLP3 + cDenorm);
s0 = LP3;

slew_diff = s0 - s0_1;
slew_sign = sign (slew_diff);
abs (sample_diff) > slew ?
    (s0 = s0_1 + (slewsign * slew));
s0_1 = s0;


LP5 = (tmplLP5 = a0LP3*s0 - b1LP3*tmplLP5 + cDenorm);
s0 = LP5;
checking = s0;


//oversampled
ps_out1l = 0.5*(s0+ps_out2l);
ps_out2l = 0.5*ps_out1l;

//1
input = ps_out1l / flosscompgain;
opampinput = input;
s = sign(input);
abs_in = abs(input);
s == -1 ? (drop = bottomrail):
         (drop = toprail);         
(exp_var = exp ((-2/drop)*abs_in);
equ_top = 1 - exp_var;
equ_bot = 1 + exp_var;
abs_out = drop * equ_top / equ_bot);
output = s * abs_out;
s0 = output;

input = s0;
s = sign(input);
abs_in = abs(input);
s == -1 ? (drop = bottomdiode):
         (drop = topdiode);         
(exp_var = exp ((-2/drop)*abs_in);
equ_top = 1 - exp_var;
equ_bot = 1 + exp_var;
abs_out = drop * equ_top / equ_bot);
output = s * abs_out;

o_in1l = output;

//2l
input = ps_out2l / flosscompgain;
opampinput = input;
s = sign(input);
abs_in = abs(input);
s == -1 ? (drop = bottomrail):
         (drop = toprail);         
(exp_var = exp ((-2/drop)*abs_in);
equ_top = 1 - exp_var;
equ_bot = 1 + exp_var;
abs_out = drop * equ_top / equ_bot);
output = s * abs_out;
s0 = output;

input = s0;
s = sign(input);
abs_in = abs(input);
s == -1 ? (drop = bottomdiode):
         (drop = topdiode);         
(exp_var = exp ((-2/drop)*abs_in);
equ_top = 1 - exp_var;
equ_bot = 1 + exp_var;
abs_out = drop * equ_top / equ_bot);
output = s * abs_out;

o_in2l = output;
checkit = output;

//bandlimit
bl3_l1 = bl2_l1;
bl3_l2 = bl2_l2;

bl2_l1 = bl1_l1;
bl2_l2 = bl1_l2;

bl1_l1 = o_in1l;
bl1_l2 = o_in2l;

bl_out1l = (bl1_l1*bl_c1 + bl2_l1*bl_c2 + bl3_l1*bl_c3);
bl_out2l = (bl1_l2*bl_c1 + bl2_l2*bl_c2 + bl3_l2*bl_c3);

//---------------------------
//power series out
o_out1l = 0.5*(bl_out1l+o_out2l);
o_out2l = 0.5*(bl_out2l+o_out1l);

//---------------------------
//fir restoration
s3l = s2l;
s2l = s1l;
s1l = o_out1l;

output = (s1l*c1+s2l*c2+s3l*c3);
s0 = output / restlosscompgain;

LP2 = (tmplLP2 = a0LP2*s0 - b1LP2*tmplLP2 + cDenorm);
s0 = LP2;

spl0 = levelratio*s0*1.2/volt;
spl1 = spl0;




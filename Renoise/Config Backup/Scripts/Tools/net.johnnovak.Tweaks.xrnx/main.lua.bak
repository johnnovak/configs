-- enable debug mode

_AUTO_RELOAD_DEBUG = function()
  renoise.app():show_status('Tweaks reloaded... ' .. os.clock())
end

------------------------------------------------------------------------------
-- CUSTOM VIEWS
------------------------------------------------------------------------------

local PATTERN_VIEW = 0
local MIXER_VIEW = 1
local SAMPLER_VIEW = 2

local _active_view = 0
local _last_view = 0
local _custom_view_switch = false

local AppWindow = renoise.ApplicationWindow

local view_index_map = {
  [AppWindow.MIDDLE_FRAME_PATTERN_EDITOR] = PATTERN_VIEW,
  [AppWindow.MIDDLE_FRAME_MIXER] = MIXER_VIEW,
  [AppWindow.MIDDLE_FRAME_INSTRUMENT_SAMPLE_OVERVIEW] = SAMPLER_VIEW,
  [AppWindow.MIDDLE_FRAME_INSTRUMENT_SAMPLE_EDITOR] = SAMPLER_VIEW,
  [AppWindow.MIDDLE_FRAME_INSTRUMENT_SAMPLE_KEYZONES] = SAMPLER_VIEW,
  [AppWindow.MIDDLE_FRAME_INSTRUMENT_SAMPLE_MODULATION] = SAMPLER_VIEW,
  [AppWindow.MIDDLE_FRAME_INSTRUMENT_SAMPLE_EFFECTS] = SAMPLER_VIEW,
  [AppWindow.MIDDLE_FRAME_INSTRUMENT_PLUGIN_EDITOR] = SAMPLER_VIEW,
  [AppWindow.MIDDLE_FRAME_INSTRUMENT_MIDI_EDITOR] = SAMPLER_VIEW
}

local view_states = {
  [PATTERN_VIEW] = {
    middle_frame = AppWindow.MIDDLE_FRAME_PATTERN_EDITOR,
    upper_frame = AppWindow.UPPER_FRAME_TRACK_SCOPES,
    upper_frame_visible = true
  },
  [MIXER_VIEW] = {
    middle_frame = AppWindow.MIDDLE_FRAME_MIXER,
    upper_frame = AppWindow.UPPER_FRAME_MASTER_SPECTRUM,
    upper_frame_visible = true
  },
  [SAMPLER_VIEW] = {
    middle_frame = AppWindow.MIDDLE_FRAME_INSTRUMENT_SAMPLE_OVERVIEW,
    upper_frame = AppWindow.UPPER_FRAME_TRACK_SCOPES,
    upper_frame_visible = true
  }
}


renoise.app().window.active_middle_frame_observable:add_notifier(
  function()
    if _custom_view_switch then
      _custom_view_switch = false
      return
    end

    _last_view = _active_view
    _active_view = view_index_map[renoise.app().window.active_middle_frame]
    print('active_view: ' .. _active_view)
  end
)


function store_view_state(view)
  local state = view_states[view]

  state['middle_frame'] = renoise.app().window.active_middle_frame
  state['upper_frame'] = renoise.app().window.active_upper_frame
  state['upper_frame_visible'] = renoise.app().window.upper_frame_is_visible
end


function load_view_state(view)
  local state = view_states[view]

  renoise.app().window.active_middle_frame = state['middle_frame']
  renoise.app().window.active_upper_frame = state['upper_frame']
  renoise.app().window.upper_frame_is_visible = state['upper_frame_visible']
end


function cycle_active_view_state()

  local w = renoise.app().window

  if _active_view == PATTERN_VIEW then
    w.upper_frame_is_visible = not w.upper_frame_is_visible

  elseif _active_view == MIXER_VIEW or _active_view == SAMPLER_VIEW then
    if w.active_upper_frame == AppWindow.UPPER_FRAME_TRACK_SCOPES then
      w.active_upper_frame = AppWindow.UPPER_FRAME_MASTER_SPECTRUM
    else
      w.active_upper_frame = AppWindow.UPPER_FRAME_TRACK_SCOPES
    end
  end
end


function show_view(repeated, view)

  if repeated then return end

  if view == _active_view then
    cycle_active_view_state()
    store_view_state(_active_view)
  else
    store_view_state(_active_view)
    _custom_view_switch = true
    load_view_state(view)
    _last_view = _active_view
    _active_view = view
  end
end


load_view_state(_active_view)

-- keybindings

renoise.tool():add_keybinding {
  name = 'Global:View:Show/Toggle Pattern View',
  invoke = function(repeated)
    show_view(repeated, PATTERN_VIEW)
  end
}

renoise.tool():add_keybinding {
  name = 'Global:View:Show/Toggle Mixer View',
  invoke = function(repeated)
    show_view(repeated, MIXER_VIEW)
  end
}

renoise.tool():add_keybinding {
  name = 'Global:View:Show/Toggle Sampler View',
  invoke = function(repeated)
    show_view(repeated, SAMPLER_VIEW)
  end
}

------------------------------------------------------------------------------
-- COLUMN NAVIGATION
------------------------------------------------------------------------------

function select_next_column()

  local song = renoise.song()

  if song.selected_track.collapsed then
    song:select_next_track()
    return
  end

  local note_column_index   = song.selected_note_column_index
  local effect_column_index = song.selected_effect_column_index
  local visible_note_columns = song.selected_track.visible_note_columns
  local visible_effect_columns = song.selected_track.visible_effect_columns

  if note_column_index > 0 then
    if note_column_index < visible_note_columns then
      song.selected_note_column_index = note_column_index + 1
    else
      if visible_effect_columns > 0 then
        song.selected_effect_column_index = 1
      else
        song:select_next_track()
      end
    end

  else
    if effect_column_index < visible_effect_columns then
      song.selected_effect_column_index = effect_column_index + 1
    else
      song:select_next_track()
    end
  end
end

------------------------------------------------------------------------------

function select_previous_column()

  local song = renoise.song()
  local track = song.selected_track
  local note_column_index   = song.selected_note_column_index
  local effect_column_index = song.selected_effect_column_index
  local visible_note_columns = track.visible_note_columns
  local visible_effect_columns = track.visible_effect_columns

  local function select_last_column_of_previous_track()
    song:select_previous_track()

    if track.visible_effect_columns > 0 then
      song.selected_effect_column_index = visible_effect_columns
    else
      song.selected_note_column_index = visible_note_columns
    end
  end

  if track.collapsed then
    select_last_column_of_previous_track()
    return
  end

  if note_column_index > 0 then
    if note_column_index > 1 then
      song.selected_note_column_index = note_column_index - 1
    else
      select_last_column_of_previous_track()
    end

  else
    if effect_column_index > 1 then
      song.selected_effect_column_index = effect_column_index - 1
    else
      if visible_note_columns > 0 then
        song.selected_note_column_index = visible_note_columns
      else
        select_last_column_of_previous_track()
      end
    end
  end
end

-- keybindings

renoise.tool():add_keybinding {
  name = 'Pattern Editor:Navigation:Jump to Next Note/FX Column',
  invoke = select_next_column
}

renoise.tool():add_keybinding {
  name = 'Pattern Editor:Navigation:Jump to Previous Note/FX Column',
  invoke = select_previous_column
}

------------------------------------------------------------------------------
-- JUMP TO TRACK
------------------------------------------------------------------------------

for i = 1, 32 do
  renoise.tool():add_keybinding {
    name = 'Pattern Editor:Navigation:Jump to Track ' .. i,
    invoke = function() renoise.song().selected_track_index = i end
  }
end

------------------------------------------------------------------------------
-- JUMP BETWEEN NOTE AND FX COLUMNS
------------------------------------------------------------------------------

local _last_note_column_index = 1
local _last_effect_column_index = 1


renoise.tool().app_new_document_observable:add_notifier(
  function()
    renoise.song().selected_track_observable:add_notifier(
      function()
        _last_note_column_index = 1
        _last_effect_column_index = 1
      end
    )
  end
)


function jump_between_note_and_effect_columns(repeated)

  if repeated then return end

  local song = renoise.song()
  local track = song.selected_track;

  if track.collapsed then return end

  if song.selected_note_column_index > 0 then
    if track.visible_effect_columns > 0 then
      _last_note_column_index = song.selected_note_column_index
      song.selected_effect_column_index =
        math.min(_last_effect_column_index, track.visible_effect_columns)
    end
  else
    if track.visible_note_columns > 0 then
      _last_effect_column_index = song.selected_effect_column_index
      song.selected_note_column_index =
        math.min(_last_note_column_index, track.visible_note_columns)
    end
  end
end

-- keybindings

renoise.tool():add_keybinding {
  name = 'Pattern Editor:Navigation:Jump between Note and FX Columns',
  invoke = jump_between_note_and_effect_columns
}

renoise.tool():add_keybinding {
  name = 'Pattern Editor:Navigation:Jump between Note and FX Columns (2nd)',
  invoke = jump_between_note_and_effect_columns
}

------------------------------------------------------------------------------
-- SHOW/TOGGLE LOWER FRAME
------------------------------------------------------------------------------

function show_toggle_lower_frame()
  local w = renoise.app().window

  if w.lower_frame_is_visible then
    if w.active_lower_frame ==
        renoise.ApplicationWindow.LOWER_FRAME_TRACK_DSPS then

      w.active_lower_frame =
          renoise.ApplicationWindow.LOWER_FRAME_TRACK_AUTOMATION
    else
      w.active_lower_frame =
          renoise.ApplicationWindow.LOWER_FRAME_TRACK_DSPS
    end

  else
    w.lower_frame_is_visible = true
  end
end


-- keybindings

renoise.tool():add_keybinding {
  name = 'Global:View:Show/Toggle Lower Frame',
  invoke = show_toggle_lower_frame
}

------------------------------------------------------------------------------
-- TURN OFF SEQUENCE SORTING
------------------------------------------------------------------------------

-- TODO add config options for this

renoise.tool().app_new_document_observable:add_notifier(
  function()
    renoise.song().sequencer.keep_sequence_sorted = false
  end
)

-- vim: ts=2 sts=4 sw=2 et
